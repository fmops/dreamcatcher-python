# coding: utf-8

"""
    

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List, Optional
from pydantic import BaseModel, StrictStr, conlist
from dreamcatcher.models.content_moderation_policy import ContentModerationPolicy
from dreamcatcher.models.dlp_policy import DlpPolicy
from dreamcatcher.models.dlp_zsner_policy import DlpZsnerPolicy

class ShowEndpointResponse(BaseModel):
    """
    ShowEndpointResponse
    """
    content_moderation_policies: Optional[conlist(ContentModerationPolicy)] = None
    dlp_policies: Optional[conlist(DlpPolicy)] = None
    dlp_zsner_policies: Optional[conlist(DlpZsnerPolicy)] = None
    name: Optional[StrictStr] = None
    __properties = ["content_moderation_policies", "dlp_policies", "dlp_zsner_policies", "name"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> ShowEndpointResponse:
        """Create an instance of ShowEndpointResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each item in content_moderation_policies (list)
        _items = []
        if self.content_moderation_policies:
            for _item in self.content_moderation_policies:
                if _item:
                    _items.append(_item.to_dict())
            _dict['content_moderation_policies'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in dlp_policies (list)
        _items = []
        if self.dlp_policies:
            for _item in self.dlp_policies:
                if _item:
                    _items.append(_item.to_dict())
            _dict['dlp_policies'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in dlp_zsner_policies (list)
        _items = []
        if self.dlp_zsner_policies:
            for _item in self.dlp_zsner_policies:
                if _item:
                    _items.append(_item.to_dict())
            _dict['dlp_zsner_policies'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> ShowEndpointResponse:
        """Create an instance of ShowEndpointResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return ShowEndpointResponse.parse_obj(obj)

        _obj = ShowEndpointResponse.parse_obj({
            "content_moderation_policies": [ContentModerationPolicy.from_dict(_item) for _item in obj.get("content_moderation_policies")] if obj.get("content_moderation_policies") is not None else None,
            "dlp_policies": [DlpPolicy.from_dict(_item) for _item in obj.get("dlp_policies")] if obj.get("dlp_policies") is not None else None,
            "dlp_zsner_policies": [DlpZsnerPolicy.from_dict(_item) for _item in obj.get("dlp_zsner_policies")] if obj.get("dlp_zsner_policies") is not None else None,
            "name": obj.get("name")
        })
        return _obj


