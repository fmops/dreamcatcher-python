# coding: utf-8

"""
    

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List, Optional, Union
from pydantic import BaseModel, StrictBool, StrictFloat, StrictInt, StrictStr, conlist, validator

class ContentModerationPolicy(BaseModel):
    """
    ContentModerationPolicy
    """
    active: Optional[StrictBool] = None
    blocked_content_types: Optional[conlist(StrictStr)] = None
    name: Optional[StrictStr] = None
    score_threshold: Optional[Union[StrictFloat, StrictInt]] = None
    __properties = ["active", "blocked_content_types", "name", "score_threshold"]

    @validator('blocked_content_types')
    def blocked_content_types_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        for i in value:
            if i not in ('toxic', 'obscene', 'insult', 'identity_hate', 'threat', 'severe_toxic'):
                raise ValueError("each list item must be one of ('toxic', 'obscene', 'insult', 'identity_hate', 'threat', 'severe_toxic')")
        return value

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> ContentModerationPolicy:
        """Create an instance of ContentModerationPolicy from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> ContentModerationPolicy:
        """Create an instance of ContentModerationPolicy from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return ContentModerationPolicy.parse_obj(obj)

        _obj = ContentModerationPolicy.parse_obj({
            "active": obj.get("active"),
            "blocked_content_types": obj.get("blocked_content_types"),
            "name": obj.get("name"),
            "score_threshold": obj.get("score_threshold")
        })
        return _obj


