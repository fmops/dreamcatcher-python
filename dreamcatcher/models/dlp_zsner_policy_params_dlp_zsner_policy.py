# coding: utf-8

"""
    

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, StrictBool, StrictFloat, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional, Union
from dreamcatcher.models.dlp_policy_anonymizer import DlpPolicyAnonymizer
from dreamcatcher.models.dlp_zsner_policy_params_dlp_zsner_policy_entities_inner import DlpZsnerPolicyParamsDlpZsnerPolicyEntitiesInner
from typing import Optional, Set
from typing_extensions import Self

class DlpZsnerPolicyParamsDlpZsnerPolicy(BaseModel):
    """
    DlpZsnerPolicyParamsDlpZsnerPolicy
    """ # noqa: E501
    active: Optional[StrictBool] = None
    anonymizer: Optional[DlpPolicyAnonymizer] = None
    entities: Optional[List[DlpZsnerPolicyParamsDlpZsnerPolicyEntitiesInner]] = None
    name: Optional[StrictStr] = None
    response: Optional[StrictStr] = None
    score_threshold: Optional[Union[StrictFloat, StrictInt]] = None
    __properties: ClassVar[List[str]] = ["active", "anonymizer", "entities", "name", "response", "score_threshold"]

    @field_validator('response')
    def response_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['block', 'alert', 'anonymize']):
            raise ValueError("must be one of enum values ('block', 'alert', 'anonymize')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of DlpZsnerPolicyParamsDlpZsnerPolicy from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of anonymizer
        if self.anonymizer:
            _dict['anonymizer'] = self.anonymizer.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in entities (list)
        _items = []
        if self.entities:
            for _item in self.entities:
                if _item:
                    _items.append(_item.to_dict())
            _dict['entities'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of DlpZsnerPolicyParamsDlpZsnerPolicy from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "active": obj.get("active"),
            "anonymizer": DlpPolicyAnonymizer.from_dict(obj["anonymizer"]) if obj.get("anonymizer") is not None else None,
            "entities": [DlpZsnerPolicyParamsDlpZsnerPolicyEntitiesInner.from_dict(_item) for _item in obj["entities"]] if obj.get("entities") is not None else None,
            "name": obj.get("name"),
            "response": obj.get("response"),
            "score_threshold": obj.get("score_threshold")
        })
        return _obj


